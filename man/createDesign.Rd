% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Design.R
\name{createDesign}
\alias{createDesign}
\alias{print.Design}
\title{Create the simulation Design object}
\usage{
createDesign(
  ...,
  subset,
  repeat_conditions = 1L,
  fractional = NULL,
  tibble = TRUE,
  stringsAsFactors = FALSE
)

\method{print}{Design}(x, list2char = TRUE, pillar.sigfig = 5, ...)
}
\arguments{
\item{...}{comma separated list of named input objects representing the simulation
factors to completely cross. Note that these arguments are passed to
\code{\link{expand.grid}} to perform the complete crossings}

\item{subset}{(optional) a logical vector indicating elements or rows to keep
to create a partially crossed simulation design}

\item{repeat_conditions}{optional integer vector used to repeat each design row
  the specified number of times. Can either be a single integer, which repeats
  each row this many times, or an integer vector equal to the number of total
  rows in the created object.

  This argument is useful when distributing independent row conditions to
  cluster computing environments, particularly with different \code{replication}
  information. For example, if 1000 replications in total are the target but
  the condition is repeated over 4 rows then only 250 replications per row
  would be required across the repeated conditions. See
  \code{\link{aggregrate_simulation}} for combining the simulation objects
  once complete}

\item{fractional}{a fractional design matrix returned from the
\code{FrF2} package.
Note that the order of the factor names/labels are associated with the
respective \code{...} inputs}

\item{tibble}{logical; return a \code{tibble} object instead of a
\code{data.frame}? Default is TRUE}

\item{stringsAsFactors}{logical; should character variable inputs be coerced
to factors when building a \code{data.frame}? Default is FALSE}

\item{x}{object returned by \code{\link{createDesign}}}

\item{list2char}{logical; for \code{tibble} object re-evaluate list elements
as character vectors for better printing of the levels? Note that this
does not change the original classes of the object, just how they are printed.
Default is TRUE}

\item{pillar.sigfig}{number of significant digits to print. Default is 5}
}
\value{
a \code{tibble} or \code{data.frame} containing the simulation experiment
  conditions to be evaluated in \code{\link{runSimulation}}
}
\description{
Create a partially or fully-crossed data object reflecting the unique
simulation design conditions. Each row of the returned object represents
a unique simulation condition, and each column represents the named factor
variables under study.
}
\examples{
\dontrun{

# modified example from runSimulation()

Design <- createDesign(N = c(10, 20),
                       SD = c(1, 2))
Design

# remove N=10, SD=2 row from initial definition
Design <- createDesign(N = c(10, 20),
                       SD = c(1, 2),
                       subset = !(N == 10 & SD == 2))
Design

# example with list inputs
Design <- createDesign(N = c(10, 20),
                       SD = c(1, 2),
                       combo = list(c(0,0), c(0,0,1)))
Design   # notice levels printed (not typical for tibble)
print(Design, list2char = FALSE)   # standard tibble output

Design <- createDesign(N = c(10, 20),
                       SD = c(1, 2),
                       combo = list(c(0,0), c(0,0,1)),
                       combo2 = list(c(5,10,5), c(6,7)))
Design
print(Design, list2char = FALSE)   # standard tibble output

# repeat each row 4 times (for cluster computing)
Design4 <- createDesign(N = c(10, 20),
                       SD.equal = c(TRUE, FALSE),
                       repeat_conditions = 4)
Design4

# repeat first two rows 2x and the rest 4 times (for cluster computing
#   where first two conditions are faster to execute)
Design24 <- createDesign(SD.equal = c(TRUE, FALSE),
                         N = c(10, 100, 1000),
                         repeat_conditions = c(2,2,rep(4, 4)))
Design24

##########

## fractional factorial example

library(FrF2)
# help(FrF2)

# 7 factors in 32 runs
fr <- FrF2(32,7)
dim(fr)
fr[1:6,]

# Create working simulation design given -1/1 combinations
fDesign <- createDesign(sample_size=c(100,200),
                        mean_diff=c(.25, 1, 2),
                        variance.ratio=c(1,4, 8),
                        equal_size=c(TRUE, FALSE),
                        dists=c('norm', 'skew'),
                        same_dists=c(TRUE, FALSE),
                        symmetric=c(TRUE, FALSE),
                        # remove same-normal combo
                        subset = !(symmetric & dists == 'norm'),
                        fractional=fr)
fDesign

}
}
\references{
Chalmers, R. P., & Adkins, M. C.  (2020). Writing Effective and Reliable Monte Carlo Simulations
with the SimDesign Package. \code{The Quantitative Methods for Psychology, 16}(4), 248-280.
\doi{10.20982/tqmp.16.4.p248}

Sigal, M. J., & Chalmers, R. P. (2016). Play it again: Teaching statistics with Monte
Carlo simulation. \code{Journal of Statistics Education, 24}(3), 136-156.
\doi{10.1080/10691898.2016.1246953}
}
\author{
Phil Chalmers \email{rphilip.chalmers@gmail.com}
}
